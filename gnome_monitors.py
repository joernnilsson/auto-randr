#import xml.etree.ElementTree as ET
from lxml import etree as ET
from collections import namedtuple

def save(input_screens, file="~/.config/monitors.xml"):

    # Remove disabled screens
    screens = list(filter(lambda x: x.set.is_enabled, input_screens))

    Output = namedtuple("Output", "vendor product serial width height rate x y rotation reflect_x reflect_y primary")
    screens_map = {}
    for s in screens:
        screens_map[s.name] = Output(
            s.manufacturer_id,
            str.format('0x{:04x}', int.from_bytes((s.product_id).to_bytes(2, 'big'), 'little')),
            str.format('0x{:08x}', int.from_bytes((s.serial_no).to_bytes(4, 'big'), 'little')),
            str(s.set.resolution[0]),
            str(s.set.resolution[1]),
            str(s.set.freq),
            str(s.set.position[0]),
            str(s.set.position[1]),
            "normal",
            "no",
            "no",
            "yes" if s.set.is_primary else "no"
        )

    # Find existing entry
    tree = ET.parse(file)
    root = tree.getroot()
    for configuration in root:
        matches = 0
        for output in configuration:
            if output.tag == "output":
                output_name = output.get("name")
                if output.find("vendor") is not None:
                    if output_name in screens_map:
                        if output.find("vendor").text == screens_map[output_name].vendor and \
                            output.find("product").text == screens_map[output_name].product and \
                            output.find("serial").text == screens_map[output_name].serial:
                            #print(output_name + ": Output match!")
                            matches += 1
                        else:
                            #print(output_name + ": output match, but wrong screen")
                            pass
                    else:
                        #print(output_name + ": defined, but not present")
                        pass
                else:
                    #print(output_name + ": No config")
                    pass
        if matches == len(screens):
            root.remove(configuration)

    root.append(make_configuration(screens_map))
    tree.write(file)

def make_configuration(screens_map):
    config = ET.Element("configuration")
    
    comment = ET.Comment("Generated by auto randr")
    config.append(comment)

    clone = ET.SubElement(config, "clone")
    clone.text = "no"

    for output_name, s in screens_map.items():
        output = ET.SubElement(config, "output")
        output.set("name", output_name)

        ET.SubElement(output, "vendor").text = s.vendor
        ET.SubElement(output, "product").text = s.product
        ET.SubElement(output, "serial").text = s.serial
        ET.SubElement(output, "width").text = s.width
        ET.SubElement(output, "height").text = s.height
        ET.SubElement(output, "rate").text = s.rate
        ET.SubElement(output, "x").text = s.x
        ET.SubElement(output, "y").text = s.y
        ET.SubElement(output, "rotation").text = s.rotation
        ET.SubElement(output, "reflect_x").text = s.reflect_x
        ET.SubElement(output, "reflect_y").text = s.reflect_y
        ET.SubElement(output, "primary").text = s.primary

    return config